import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import {
  Box,
  Typography,
  Button,
  CircularProgress,
  Alert,
  Snackbar,
  Divider,
  Paper,
  Container,
  Grid,
  Fade,
  Card,
  CardContent,
  Avatar,
  IconButton,
  Chip,
  Stack,
} from '@mui/material';
import { 
  Add as AddIcon, 
  Refresh as RefreshIcon,
  UsbOff as UsbOffIcon,
  Usb as UsbIcon,
  Dashboard as DashboardIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  TrendingUp as TrendingUpIcon,
} from '@mui/icons-material';
import PrinterCard, { Printer } from '../components/PrinterCard';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç PrinterSettings - —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ USB-–ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏
 */
const PrinterSettings: React.FC = () => {
  const navigate = useNavigate();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
  const [printers, setPrinters] = useState<Printer[]>([]);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  const [loading, setLoading] = useState(true);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
  const [refreshing, setRefreshing] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
  const [error, setError] = useState<string | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
  const [snackbar, setSnackbar] = useState({
    open: false,
    message: '',
    severity: 'info' as 'error' | 'info' | 'success' | 'warning',
  });

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ USB-–ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
   * –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ Electron API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö USB-–ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
   */
  const loadPrinters = async () => {
    try {
      setLoading(true);
      setError(null);
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
      const savedPrinters = await window.electronAPI.getPrinters();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö USB-–ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
      const usbPrinters = await window.electronAPI.getUsbPrinters();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
      const updatedPrinters = savedPrinters.map(printer => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–Ω—Ç–µ—Ä –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö
        const connectedPrinter = usbPrinters.find(
          usbPrinter => usbPrinter.id === printer.id
        );
        
        return {
          ...printer,
          isConnected: !!connectedPrinter,
        };
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö
      const newPrinters = usbPrinters.filter(
        usbPrinter => !savedPrinters.some(p => p.id === usbPrinter.id)
      ).map(usbPrinter => ({
        ...usbPrinter,
        isConnected: true,
      }));
      
      // –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∏ –Ω–æ–≤—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã
      setPrinters([...updatedPrinters, ...newPrinters]);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      for (const printer of [...updatedPrinters, ...newPrinters]) {
        await window.electronAPI.savePrinter(printer);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤:', err);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ USB-–ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤.');
    } finally {
      setLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadPrinters();
  }, []);

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
   * –£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   * 
   * @param id –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  const handleDeletePrinter = async (id: string) => {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º API –∏–∑ preload –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–Ω—Ç–µ—Ä–∞
      await window.electronAPI.deletePrinter(id);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
      setPrinters(printers.filter(p => p.id !== id));
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
      setSnackbar({
        open: true,
        message: '–ü—Ä–∏–Ω—Ç–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞',
        severity: 'success',
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞:', err);
      setSnackbar({
        open: true,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–∏–Ω—Ç–µ—Ä–∞',
        severity: 'error',
      });
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏
   * –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—á–∞—Ç–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–∏–Ω—Ç–µ—Ä–æ–º
   * 
   * @param printer –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–∏–Ω—Ç–µ—Ä
   */
  const handleSelectPrinter = (printer: Printer) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—á–∞—Ç–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞
    navigate(`/print?printer=${printer.id}`);
  };

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è
   * 
   * @param id –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  const handleSetDefaultPrinter = async (id: string) => {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è –æ–¥–∏–Ω –∫–∞–∫ –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const updatedPrinters = printers.map(p => ({
        ...p,
        isDefault: p.id === id
      }));
      
      setPrinters(updatedPrinters);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
      for (const printer of updatedPrinters) {
        await window.electronAPI.savePrinter(printer);
      }
      
      setSnackbar({
        open: true,
        message: '–ü—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω',
        severity: 'success',
      });
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', err);
      setSnackbar({
        open: true,
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
        severity: 'error',
      });
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  const handleCloseSnackbar = () => {
    setSnackbar({
      ...snackbar,
      open: false,
    });
  };

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ USB-–ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
   * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å
   */
  const handleRefreshPrinters = async () => {
    try {
      setRefreshing(true);
      setSnackbar({
        open: true,
        message: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ USB-–ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...',
        severity: 'info',
      });
      
      await loadPrinters();
      
      setSnackbar({
        open: true,
        message: '–°–ø–∏—Å–æ–∫ USB-–ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω',
        severity: 'success',
      });
    } catch (err) {
      setSnackbar({
        open: true,
        message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤',
        severity: 'error',
      });
    } finally {
      setRefreshing(false);
    }
  };

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º
  const connectedPrinters = printers.filter(p => p.isConnected).length;
  const totalPrinters = printers.length;
  const hasPrinters = totalPrinters > 0;
  const hasConnectedPrinters = connectedPrinters > 0;

  return (
    <Container maxWidth="xl" sx={{ py: 2 }}>
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <Box sx={{ 
        display: 'flex', 
        justifyContent: 'space-between', 
        alignItems: 'flex-start', 
        mb: 4,
        flexWrap: 'wrap',
        gap: 3,
      }}>
        <Box>
          <Typography 
            variant="h3" 
            gutterBottom
            sx={{ 
              fontWeight: 700,
              color: 'white',
              textShadow: '0px 2px 4px rgba(0, 0, 0, 0.3)',
              mb: 1,
            }}
          >
            –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏ üñ®Ô∏è
          </Typography>
          <Typography 
            variant="h6" 
            sx={{ 
              color: 'rgba(255, 255, 255, 0.8)',
              fontWeight: 400,
              mb: 2,
            }}
          >
            –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ USB-–ø—Ä–∏–Ω—Ç–µ—Ä–∞–º–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
          </Typography>
          
          <Stack direction="row" spacing={1} sx={{ mb: 2 }}>
            <Chip 
              label={`${totalPrinters} –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤`}
              sx={{ 
                bgcolor: 'rgba(255, 255, 255, 0.2)',
                color: 'white',
                fontWeight: 600,
              }}
            />
            <Chip 
              label={`${connectedPrinters} –∞–∫—Ç–∏–≤–Ω—ã—Ö`}
              sx={{ 
                bgcolor: hasConnectedPrinters ? 'rgba(0, 212, 170, 0.8)' : 'rgba(255, 107, 107, 0.8)',
                color: 'white',
                fontWeight: 600,
              }}
            />
          </Stack>
        </Box>
        
        <Stack direction="row" spacing={2}>
          <IconButton
            onClick={handleRefreshPrinters}
            disabled={loading || refreshing}
            sx={{
              background: 'rgba(255, 255, 255, 0.1)',
              color: 'white',
              backdropFilter: 'blur(10px)',
              width: 48,
              height: 48,
              '&:hover': {
                background: 'rgba(255, 255, 255, 0.2)',
              },
              '&:disabled': {
                background: 'rgba(255, 255, 255, 0.05)',
                color: 'rgba(255, 255, 255, 0.3)',
              },
            }}
          >
            {refreshing ? <CircularProgress size={24} color="inherit" /> : <RefreshIcon />}
          </IconButton>
          
          <Button
            variant="contained"
            size="large"
            startIcon={<AddIcon />}
            onClick={() => navigate('/printers/new')}
            sx={{ 
              py: 1.5,
              px: 3,
              borderRadius: 3,
              fontWeight: 600,
              background: 'rgba(255, 255, 255, 0.9)',
              color: 'primary.main',
              '&:hover': {
                background: 'white',
                transform: 'translateY(-2px)',
              },
            }}
          >
            –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä
          </Button>
        </Stack>
      </Box>
        
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ USB-–ø—Ä–∏–Ω—Ç–µ—Ä–∞–º */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        <Grid item xs={12} sm={6} md={3}>
          <Fade in timeout={500}>
            <Card sx={{ 
              height: '100%',
              background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
              color: 'white',
            }}>
              <CardContent sx={{ p: 3 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Avatar sx={{ 
                    bgcolor: 'rgba(255, 255, 255, 0.2)',
                    mr: 2,
                    width: 56,
                    height: 56,
                  }}>
                    <UsbIcon sx={{ color: 'white', fontSize: 28 }} />
                  </Avatar>
                  <Box>
                    <Typography variant="body2" sx={{ opacity: 0.8 }}>
                      –í—Å–µ–≥–æ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤
                    </Typography>
                    <Typography variant="h4" fontWeight={700}>
                      {totalPrinters}
                    </Typography>
                  </Box>
                </Box>
                <Typography variant="body2" sx={{ opacity: 0.8 }}>
                  –£–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
                </Typography>
              </CardContent>
            </Card>
          </Fade>
        </Grid>
        
        <Grid item xs={12} sm={6} md={3}>
          <Fade in timeout={700}>
            <Card sx={{ 
              height: '100%',
              background: hasConnectedPrinters 
                ? 'linear-gradient(135deg, #00d4aa 0%, #4ade80 100%)'
                : 'linear-gradient(135deg, #ff6b6b 0%, #f5576c 100%)',
              color: 'white',
            }}>
              <CardContent sx={{ p: 3 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Avatar sx={{ 
                    bgcolor: 'rgba(255, 255, 255, 0.2)',
                    mr: 2,
                    width: 56,
                    height: 56,
                  }}>
                    {hasConnectedPrinters ? (
                      <CheckCircleIcon sx={{ color: 'white', fontSize: 28 }} />
                    ) : (
                      <UsbOffIcon sx={{ color: 'white', fontSize: 28 }} />
                    )}
                  </Avatar>
                  <Box>
                    <Typography variant="body2" sx={{ opacity: 0.8 }}>
                      –ü–æ–¥–∫–ª—é—á–µ–Ω–æ
                    </Typography>
                    <Typography variant="h4" fontWeight={700}>
                      {connectedPrinters}
                    </Typography>
                  </Box>
                </Box>
                <Typography variant="body2" sx={{ opacity: 0.8 }}>
                  {hasConnectedPrinters ? '–ì–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ' : '–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π'}
                </Typography>
              </CardContent>
            </Card>
          </Fade>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Fade in timeout={900}>
            <Card sx={{ 
              height: '100%',
              background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
              color: 'white',
            }}>
              <CardContent sx={{ p: 3 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Avatar sx={{ 
                    bgcolor: 'rgba(255, 255, 255, 0.2)',
                    mr: 2,
                    width: 56,
                    height: 56,
                  }}>
                    <TrendingUpIcon sx={{ color: 'white', fontSize: 28 }} />
                  </Avatar>
                  <Box>
                    <Typography variant="body2" sx={{ opacity: 0.8 }}>
                      –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
                    </Typography>
                    <Typography variant="h4" fontWeight={700}>
                      {totalPrinters > 0 ? Math.round((connectedPrinters / totalPrinters) * 100) : 0}%
                    </Typography>
                  </Box>
                </Box>
                <Typography variant="body2" sx={{ opacity: 0.8 }}>
                  –°–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–Ω—ã
                </Typography>
              </CardContent>
            </Card>
          </Fade>
        </Grid>

        <Grid item xs={12} sm={6} md={3}>
          <Fade in timeout={1100}>
            <Card sx={{ 
              height: '100%',
              background: 'linear-gradient(135deg, #a8edea 0%, #fed6e3 100%)',
              color: '#2d3748',
            }}>
              <CardContent sx={{ p: 3 }}>
                <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                  <Avatar sx={{ 
                    bgcolor: 'rgba(45, 55, 72, 0.1)',
                    mr: 2,
                    width: 56,
                    height: 56,
                  }}>
                    <DashboardIcon sx={{ color: '#2d3748', fontSize: 28 }} />
                  </Avatar>
                  <Box>
                    <Typography variant="body2" sx={{ opacity: 0.8 }}>
                      –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
                    </Typography>
                    <Typography variant="h5" fontWeight={700}>
                      {loading ? '–ó–∞–≥—Ä—É–∑–∫–∞...' : '–ê–∫—Ç–∏–≤–Ω–∞'}
                    </Typography>
                  </Box>
                </Box>
                <Typography variant="body2" sx={{ opacity: 0.8 }}>
                  –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Ä–∞–±–æ—Ç–∞—é—Ç
                </Typography>
              </CardContent>
            </Card>
          </Fade>
        </Grid>
      </Grid>

      {/* –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ */}
      <Box sx={{ 
        background: 'rgba(255, 255, 255, 0.95)',
        backdropFilter: 'blur(20px)',
        borderRadius: 4,
        p: 4,
        mb: 3,
        border: '1px solid rgba(255, 255, 255, 0.2)',
        boxShadow: '0px 20px 40px rgba(0, 0, 0, 0.1)',
      }}>
        {loading ? (
          <Box sx={{ 
            display: 'flex', 
            flexDirection: 'column',
            alignItems: 'center',
            py: 8,
          }}>
            <CircularProgress size={48} sx={{ mb: 2 }} />
            <Typography variant="h6" color="text.secondary">
              –ü–æ–∏—Å–∫ USB-–ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤...
            </Typography>
            <Typography variant="body2" color="text.secondary" sx={{ mt: 1 }}>
              –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            </Typography>
          </Box>
        ) : (
          // –°–ø–∏—Å–æ–∫ –ø—Ä–∏–Ω—Ç–µ—Ä–æ–≤ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
          <Fade in={!loading}>
            <Box>
              {printers.length === 0 ? (
                <Box sx={{ textAlign: 'center', py: 8 }}>
                  <Box sx={{ 
                    width: 120, 
                    height: 120, 
                    borderRadius: '50%',
                    background: 'linear-gradient(135deg, #f093fb 0%, #f5576c 100%)',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    mx: 'auto',
                    mb: 3,
                    boxShadow: '0px 20px 40px rgba(240, 147, 251, 0.3)',
                  }}>
                    <UsbOffIcon sx={{ fontSize: 48, color: 'white' }} />
                  </Box>
                  
                  <Typography variant="h4" fontWeight={600} gutterBottom>
                    USB-–ø—Ä–∏–Ω—Ç–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
                  </Typography>
                  
                  <Typography variant="body1" color="text.secondary" sx={{ mb: 4, maxWidth: 500, mx: 'auto' }}>
                    –ü–æ–¥–∫–ª—é—á–∏—Ç–µ USB-–ø—Ä–∏–Ω—Ç–µ—Ä –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. 
                    –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∏–Ω—Ç–µ—Ä –≤–∫–ª—é—á–µ–Ω –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.
                  </Typography>
                  
                  <Stack direction="row" spacing={2} justifyContent="center">
                    <Button
                      variant="contained"
                      size="large"
                      startIcon={<RefreshIcon />}
                      onClick={handleRefreshPrinters}
                      disabled={refreshing}
                      sx={{ 
                        py: 1.5,
                        px: 3,
                        borderRadius: 3,
                        fontWeight: 600,
                      }}
                    >
                      {refreshing ? '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫'}
                    </Button>
                    
                    <Button
                      variant="outlined"
                      size="large"
                      startIcon={<AddIcon />}
                      onClick={() => navigate('/printers/new')}
                      sx={{ 
                        py: 1.5,
                        px: 3,
                        borderRadius: 3,
                        borderWidth: 2,
                        '&:hover': { borderWidth: 2 },
                      }}
                    >
                      –î–æ–±–∞–≤–∏—Ç—å –≤—Ä—É—á–Ω—É—é
                    </Button>
                  </Stack>
                </Box>
              ) : (
                <Box>
                  <Typography variant="h5" fontWeight={600} sx={{ mb: 3 }}>
                    –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã ({printers.length})
                  </Typography>
                  
                  <Grid container spacing={3}>
                    {/* –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—Ç–µ—Ä—ã: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ, –∑–∞—Ç–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é */}
                    {printers
                      .sort((a, b) => {
                        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—Ç–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                        if (a.isDefault && !b.isDefault) return -1;
                        if (!a.isDefault && b.isDefault) return 1;
                        
                        // –ó–∞—Ç–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –ø—Ä–∏–Ω—Ç–µ—Ä—ã
                        if (a.isConnected && !b.isConnected) return -1;
                        if (!a.isConnected && b.isConnected) return 1;
                        
                        // –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
                        return a.name.localeCompare(b.name);
                      })
                      .map((printer, index) => (
                        <Grid item xs={12} key={printer.id}>
                          <Fade in timeout={300 + index * 100}>
                            <Box>
                              <PrinterCard
                                printer={printer}
                                onDelete={handleDeletePrinter}
                                onSelect={handleSelectPrinter}
                                onSetDefault={handleSetDefaultPrinter}
                              />
                            </Box>
                          </Fade>
                        </Grid>
                      ))
                    }
                  </Grid>
                </Box>
              )}
            </Box>
          </Fade>
        )}
      </Box>

      {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) */}
      {error && (
        <Fade in>
          <Alert 
            severity="error" 
            sx={{ 
              mb: 3,
              borderRadius: 3,
              background: 'rgba(255, 107, 107, 0.1)',
              border: '1px solid rgba(255, 107, 107, 0.2)',
              backdropFilter: 'blur(10px)',
            }}
          >
            {error}
          </Alert>
        </Fade>
      )}

      {/* –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ */}
      <Snackbar
        open={snackbar.open}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
      >
        <Alert 
          onClose={handleCloseSnackbar} 
          severity={snackbar.severity}
          sx={{ 
            width: '100%',
            borderRadius: 3,
            boxShadow: '0px 8px 32px rgba(0, 0, 0, 0.12)',
            backdropFilter: 'blur(10px)',
          }}
        >
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default PrinterSettings;